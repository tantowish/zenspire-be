// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  practitioner
  user
}

enum Mood {
  happy
  relaxed
  indifferent
  sad
  angry
}

model Exp {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(255)
  experience_points Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("exp")
}

model User {
  id                Int              @id @default(autoincrement())
  first_name        String           @db.VarChar(255)
  last_name         String?          @db.VarChar(255)
  email             String           @unique @db.VarChar(255)
  password          String           @db.VarChar(255)
  experience_points Int              @default(0)
  isAnonymous       Boolean          @default(false)
  role              Role             @default(user)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  chatAI            ChatAI?
  practitioner      Practitioner?
  discussion        Discussion[]
  comment           Comment[]
  journal           Journal[]
  discussionLike    DiscussionLike[]
  PHQ9              PHQ9[]
  post              Post[]

  @@map("users")
}

model Practitioner {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique
  user            User    @relation(fields: [user_id], references: [id])
  university      String? @db.VarChar(255)
  no_izin_praktek String? @db.VarChar(255)
  no_hp           String  @db.VarChar(255)
  nik             String? @db.VarChar(255)
  alamat_praktek  String? @db.VarChar(255)

  @@map("practitioners")
}

model ChatAI {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  user         User     @relation(fields: [user_id], references: [id])
  history_chat Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("chat_ai")
}

model Discussion {
  id             Int              @id @default(autoincrement())
  user_id        Int
  user           User             @relation(fields: [user_id], references: [id])
  title          String           @db.VarChar(255)
  body           String           @db.Text
  image          String?          @db.VarChar(255)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  comment        Comment[]
  discussionLike DiscussionLike[]

  @@map("discussions")
}

model DiscussionLike {
  id            Int        @id @default(autoincrement())
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  discussion_id Int
  discussion    Discussion @relation(fields: [discussion_id], references: [id])

  @@map("discussion_likes")
}

model Comment {
  id            Int        @id @default(autoincrement())
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  discussion_id Int
  discussion    Discussion @relation(fields: [discussion_id], references: [id])
  body          String     @db.Text
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  @@map("comments")
}

model Post {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  title      String   @db.VarChar(255)
  body       String   @db.Text
  image      String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("posts")
}

model Journal {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  mood       Mood
  question_1 String?  @db.Text
  question_2 String?  @db.Text
  question_3 String?  @db.Text
  question_4 String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("journals")
}

model PHQ9 {
  id          Int  @id @default(autoincrement())
  user_id     Int
  user        User @relation(fields: [user_id], references: [id])
  question_id Int
  severity    Int
}
